{"name":"Random-docs","tagline":"","body":"# Title\r\n\r\n<script type=\"text/javascript\" src=\"http://www.websequencediagrams.com/service.js\"></script>\r\n\r\nThis is a test\r\n\r\n```\r\ntitle Challenge a named auth type\r\n\r\nA->+B: next(env)\r\n\r\n\r\nB->+C: next(env)\r\nnote over C\r\nenv[\"StatusCode\"] = 401\r\nenv[\"Challenge\"] += \"B\"\r\nend note\r\nC-->-B: complete\r\n\r\nnote over B\r\nif 401 && any env[\"Challenge\"] == \"B\"?\r\n-  env[\"StatusCode\"] = 302\r\n-  env[\"Location\"] = \"/login\"\r\nend note\r\n\r\nB-->-A: complete\r\n```\r\n\r\n```\r\ntitle Challenge to any active\r\n\r\nA->+B: next(env)\r\n\r\n\r\nB->+C: next(env)\r\nnote over C\r\nenv[\"StatusCode\"] = 401\r\nend note\r\nC-->-B: complete\r\n\r\nnote over B\r\nif 401 && env[\"Challenge\"] empty && options.Mode == Active?\r\n-  env[\"StatusCode\"] = 302\r\n-  env[\"Location\"] = \"/login\"\r\nend note\r\n\r\nB-->-A: complete\r\n```\r\n\r\n```\r\ntitle SignIn\r\n\r\nA->+B: next(env)\r\n\r\n\r\nB->+C: next(env)\r\nnote over C\r\nidentity = new ClaimsIdentity(\"B\", claims)\r\nenv[\"SignIn\"] = new ClaimsPrincipal(identity)\r\nend note\r\nC-->-B: complete\r\n\r\nnote over B\r\nforeach env[\"SignIn\"].Identities\r\nif identity.AuthenticationType == \"B\"?\r\n-  tokenize identity\r\n-  set-cookie\r\nend note\r\n\r\nB-->-A: complete\r\n```\r\n\r\n```\r\ntitle SignOut, active or passive\r\n\r\nA->+B: next(env)\r\n\r\n\r\nB->+C: next(env)\r\nnote over C\r\nenv[\"SignOut\"] += \"B\"\r\nend note\r\nC-->-B: complete\r\n\r\nnote over B\r\nif any env[\"SignOut\"] == \"B\"?\r\n-  set-cookie \"\", expired\r\nend note\r\n\r\nB-->-A: complete\r\n```\r\n\r\n```\r\ntitle Authentice, active\r\n\r\nA->+B: next(env)\r\n\r\nnote over B\r\nidentity = this.AuthenticateAsync()\r\nif identity?\r\n- request.User += identity\r\nend note\r\n\r\nB->+C: next(env)\r\nnote over C\r\nexamines request.User\r\nend note\r\nC-->-B: complete\r\n\r\nB-->-A: complete\r\n```\r\n\r\n```\r\ntitle Authentice, passive\r\n\r\nA->+B: next(env)\r\n\r\nB->+C: next(env)\r\n\r\nnote over C\r\nneeds identity from \"B\"\r\nAuthenticateAsync = (func)env[\"AuthAsync\"]\r\nend note\r\n\r\nC->+B: AuthenticateAsync(\"B\", callback)\r\n\r\nnote over B\r\nif types contains \"B\"?\r\n- identity = this.AuthenticateAsync()\r\n- callback(identity)\r\nend note\r\n\r\nB->+C: callback(identity)\r\n\r\nnote over C\r\nreceives identity\r\nend note\r\n\r\nC-->-B: \r\n\r\nB-->-C: complete\r\n\r\nnote over C\r\nnow has identity\r\nend note\r\n\r\nC-->-B: complete\r\n\r\nB-->-A: complete\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}